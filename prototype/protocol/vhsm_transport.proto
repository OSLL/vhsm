//corresponds to vhsm_session structure defined in common.h
message VhsmSession {
  required sint64 sid = 1;
}

//corresponds to vhsm_key_id structure defined in common.h
message VhsmKeyId {
  required bytes id = 1;
}

//messge type for all key data
message VhsmKey {
  required bytes key = 1;
}

//message type for all raw data message parts.
message VhsmRawData {
  required bytes data = 1;
}

//all possible error codes are listed here
enum ErrorCode {
  ERR_NO_ERROR = 0;
  ERR_BAD_ARGUMENTS = 1;
  ERR_BAD_SESSION = 2;
  ERR_BAD_DIGEST_METHOD = 3;
  ERR_DIGEST_INIT = 4;
  ERR_DIGEST_NOT_INITIALIZED = 5;
  ERR_KEY_NOT_FOUND = 6;
  ERR_BAD_MAC_METHOD = 7;
  ERR_MAC_INIT = 8;
  ERR_MAC_NOT_INITIALIZED = 9;
  ERR_VHSM_ERROR = 10;
  ERR_BAD_CREDENTIALS = 11;
  ERR_KEY_ID_OCCUPIED = 12;
  ERR_NOT_AUTHORIZED = 13;
}


//
//digest data
//

//enumeration of all supproted digest mechanism types
enum VhsmDigestMechanismId {
  SHA1 = 1;
}

//digest mechanism type + corresponding parameters
message VhsmDigestMechanism {
  required VhsmDigestMechanismId mid = 1;
  
  //TODO add parameters for methods requiring parameters
}


//
//MAC data
//

//enumeration of all supported MAC mechanisms
enum VhsmMacMechanismId {
  HMAC = 1;
}

//mac mechanism type + corresponding mechanism parameters
message VhsmMacMechanism {
  
  //parameters message for VhsmMacMechanismId::HMAC type.
  message HmacParameters {
    required VhsmDigestMechanism digest_mechanism = 1;
    
    required VhsmKeyId key_id = 2;
  }
  
  required VhsmMacMechanismId mid = 1;
  
  //parameters VhsmMacMechanismId::HMAC type.
  optional HmacParameters hmac_parameters = 2;
  
  //TODO add parameters for methods requiring parameters
}

//enumeration of all supported message classes
enum VhsmMessageClass {
  SESSION = 1;
  DIGEST = 2;
  MAC = 3;
  KEY_MGMT = 4;
}


//Corresponds to VhsmMessageClass::SESSION
message VhsmSessionMessage {
  enum MessageType {
    START = 1;
    END = 2;
    LOGIN = 3;
    LOGOUT = 4;
  }
  
  message Login {
    required string username = 1;
    required string password = 2;
  }
  
  required MessageType type = 1;
  
  optional Login login_message = 2;
}

//Corresponds to VhsmDigestMessage::DIGEST
message VhsmDigestMessage {
  enum MessageType {
    INIT = 1;
    UPDATE = 2;
    UPDATE_KEY = 3;
    GET_DIGEST_SIZE = 4;
    END = 5;
  }
  
  message Init {
    required VhsmDigestMechanism mechanism = 1;
  }
  
  message Update {
    required VhsmRawData data_chunk = 1;
  }
  
  message UpdateKey {
    required VhsmKeyId key_id = 1;
  }
  
  required MessageType type = 1;
  
  optional Init init_message = 2;
  optional Update update_message = 3;
  optional UpdateKey update_key_message = 4;
}

//Corresponds to VhsmDigestMessage::MAC
message VhsmMacMessage {
  enum MessageType {
    INIT = 1;
    UPDATE = 2;
    GET_MAC_SIZE = 3;
    END = 4;
  }
  
  message Init {
    required VhsmMacMechanism mechanism = 1;
  }
  
  message Update {
    required VhsmRawData data_chunk = 1;
  }
  
  
  required MessageType type = 1;
  
  optional Init init_message = 2;
  optional Update update_message = 3;
}

//Corresponds to VhsmMessageClass::KEY_MGMT
message VhsmKeyMgmtMessage {
  enum MessageType {
    GET_KEY_IDS_COUNT = 1;
    GET_KEY_IDS = 2;
    DELETE_KEY = 3;
    CREATE_KEY = 4;
    GET_KEY_INFO = 5;
  }
  
  message DeleteKey {
    required VhsmKeyId key_id = 1;
  }
  
  message CreateKey {
    required VhsmKeyId key_id = 1;
    required VhsmKey key = 2;
  }

  message GetKeyInfo {
    optional VhsmKeyId key_id = 1;
  }

  required MessageType type = 1;
  
  optional DeleteKey delete_key_message = 2;
  optional CreateKey create_key_message = 3;
  optional GetKeyInfo get_key_info_message = 4;
}

//is used as a response to VhsmKeyMgmtMessage::MessageType::GET_KEY_IDS message
message KeyIdList {
  repeated VhsmKeyId ids = 1;
}

message KeyInfo {
  required VhsmKeyId id = 1;
  required sint64 length = 2;
  required sint32 purpose = 3;
  required sint64 time = 4;
}

message KeyInfoList {
  repeated KeyInfo keys = 1;
}

//main vhsm message class - all messages to vhsm should be sent using this message type
//message contents depends on message_class property's value
message VhsmMessage {
  required VhsmMessageClass message_class = 1;
  
  required VhsmSession session = 6;
  
  optional VhsmSessionMessage session_message = 2;
  optional VhsmDigestMessage digest_message = 3;
  optional VhsmMacMessage mac_message = 4;
  optional VhsmKeyMgmtMessage key_mgmt_message = 5;
}

//main vhsm response class - all responses from vhsm should be passed using this message type
message VhsmResponse {
  
  enum ResponseType {
    ERROR = 1;
    OK = 2;
    RAW_DATA = 3;
    UNSIGNED_INT = 4;
    SESSION = 5;
    KEY_ID_LIST = 6;
    KEY_INFO_LIST = 7;
  }
  
  required ResponseType type = 1;
  
  optional ErrorCode error_code = 2;
  
  optional VhsmRawData raw_data = 3;
  optional uint32 unsigned_int = 4;
  optional VhsmSession session = 5;
  
  optional KeyIdList key_ids = 6;
  optional KeyInfoList key_info = 7;

}
